<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="ArchitectureSimulator_v11" default="default" basedir=".">
    <description>Builds, tests, and runs the project ArchitectureSimulator_v11.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="ArchitectureSimulator_v10-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->


    <target name="-pre-compile" description="Creating Build Information">
        <propertyfile file="${src.dir}\version.properties">
            <entry key="build_number" value="1" type="int" operation="+"/>
        </propertyfile> 
        <tstamp>
            <format property="TODAY" pattern="EEE, d-MMMM-yyyy HH:mm:ss z" locale="ENGLISH, GERMANY"/>
        </tstamp>
        <property file="${src.dir}\version.properties" />
        <echo file="${src.dir}\architecturesimulator\BuildInfo.java">
		 /*
  		  * Copyright 2012 Aleksejs Okolovskis &lt;oko@aloko.de&gt;.
  		  *
  		  * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  		  * you may not use this file except in compliance with the License.
  		  * You may obtain a copy of the License at
 		  *
		  *      http://www.apache.org/licenses/LICENSE-2.0
		  *
  		  * Unless required by applicable law or agreed to in writing, software
  		  * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  		  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  		  * See the License for the specific language governing permissions and
  		  * limitations under the License.
		  */
		package architecturesimulator;

		public class BuildInfo {
                        public static final String software="Architecture Simulator";
                        public static final String author="Aleksejs Okolovskis";
			public static final String email="oko@aloko.de";
                        public static final String home="aloko.de";
			public static final String timeStamp="${TODAY}";
                        public static final String build="${build_number}";
                        public static final String software_version = "${software_version}";
                        
		}
        </echo>
    </target>
        
    <target name="-post-jar" description="Create Destribution Bundles">
        <mkdir dir="${dist.dir}/merge/content"/>
       <!--     <unzip dest="${dist.dir}/merge/content">
                <fileset dir="${dist.dir}/lib">
                    <include name="*.class"/>
                </fileset>
              <patternset>
                    <include name="*.jar"/>
               </patternset>
            </unzip>
            <copy file="${basedir}/${dist.jar}" tofile="${dist.dir}/merge/${application.title}"></copy>
            <jar update="1" destfile="${dist.dir}/merge/${application.title}" basedir="${dist.dir}/merge/content"/>
       
        -->
        <!-- Create a Bundled jar with all libs -->
        <jar destfile="${dist.dir}/${application.title}-release.jar" includes="**/*.*">
            <manifest>
                <attribute name="Main-Class" value="${main.class}" />
            </manifest>
            <zipgroupfileset dir="${dist.dir}/lib" includes="*.jar" />
            <zipgroupfileset dir="${dist.dir}" includes="${application.title}.jar" />
        </jar>
    
        <!-- Create Zip-file containing a distributable version with docs, and resources -->
        <zip destfile="${basedir}/${dist.dir}/${application.title}.zip">
            <file file='${dist.dir}/${application.title}-release.jar'/>
            <zipfileset dir="${basedir}/res/" includes="mu0-2.architecture.xml" fullpath="res/mu0-2.architecture.xml"/>
            <zipfileset dir="${basedir}/res/" includes="mu0-2.layout.xml" fullpath="res/mu0-2.layout.xml"/>
            <zipfileset dir="${basedir}/res/font" prefix="res/font"/>
            <zipfileset dir="${basedir}/res/doc/use" />
            <zipfileset dir="${basedir}/res/doc/configure" />
        </zip>
        
        <!-- Create a Zip folder of the project -->
        <delete dir="${basedir}/merge"/>
        <delete file="${basedir}/${application.title}_project_bundle.zip"/>
        <zip destfile="${basedir}/${application.title}_project_bundle.zip" basedir="${basedir}"/>
        
    </target>
	
	
</project>
