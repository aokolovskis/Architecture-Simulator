/* 
 * Copyright 2012 Aleksejs Okolovskis <oko@aloko.de>. 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */
package architecturesimulator.gui;

import architecturesimulator.ArchitectureObjectWithBusConnection;
import architecturesimulator.BuildInfo;
import architecturesimulator.Command;
import architecturesimulator.CommandPerformer.Entry;
import architecturesimulator.Simulator;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Point;
import java.awt.TrayIcon.MessageType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;

/**

 *

 * @author Aleksejs Okolovskis (oko@aloko.de)

 */
public class MainScreen extends javax.swing.JFrame {

    Simulator s = new Simulator();
    JFrame instructionTableJframe = null;
    ExecutionLog executionLog = null;
    Collection<Component> dynamicly_addet = new ArrayList<Component>();

    /** Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().add(s, BorderLayout.CENTER);
        initExecutionLog();
    }

    /** This method is called from within the constructor to
    
     * initialize the form.
    
     * WARNING: Do NOT modify this code. The content of this method is
    
     * always regenerated by the Form Editor.
    
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        microStep = new javax.swing.JButton();
        InstructionStep = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenFiles = new javax.swing.JMenuItem();
        Reset = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        showLog = new javax.swing.JCheckBoxMenuItem();
        showInstructions = new javax.swing.JCheckBoxMenuItem();
        showExecutionLog = new javax.swing.JCheckBoxMenuItem();
        infoMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        seperatorMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(BuildInfo.software + " v" + BuildInfo.software_version + " ("+BuildInfo.build +")" + " by "+BuildInfo.author);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));
        jPanel2.add(filler1);

        microStep.setText("Micro Step");
        microStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microStepActionPerformed(evt);
            }
        });
        jPanel2.add(microStep);

        InstructionStep.setText("Instruction");
        InstructionStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstructionStepActionPerformed(evt);
            }
        });
        jPanel2.add(InstructionStep);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        FileMenu.setText("File");

        OpenFiles.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenFiles.setText("Open");
        OpenFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFilesActionPerformed(evt);
            }
        });
        FileMenu.add(OpenFiles);

        Reset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        FileMenu.add(Reset);

        jMenuBar1.add(FileMenu);

        viewMenu.setText("View");

        showLog.setText("Show System Log");
        showLog.setEnabled(false);
        viewMenu.add(showLog);

        showInstructions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        showInstructions.setText("Show Instruction Table");
        showInstructions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInstructionsActionPerformed(evt);
            }
        });
        viewMenu.add(showInstructions);

        showExecutionLog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        showExecutionLog.setText("Show Execution Log");
        showExecutionLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showExecutionLogActionPerformed(evt);
            }
        });
        viewMenu.add(showExecutionLog);

        jMenuBar1.add(viewMenu);

        infoMenu.setText("Info");
        infoMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoMenuMouseClicked(evt);
            }
        });
        infoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InfoMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(infoMenu);

        jMenu1.setText("License");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        seperatorMenu.setText("|");
        seperatorMenu.setEnabled(false);
        jMenuBar1.add(seperatorMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InfoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InfoMenuActionPerformed
    }//GEN-LAST:event_InfoMenuActionPerformed

    private void infoMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoMenuMouseClicked
        Information i = new Information(this, true);        // TODO add your handling code here:
        i.setLocationRelativeTo(this);
        i.setVisible(true);
    }//GEN-LAST:event_infoMenuMouseClicked

    private void OpenFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFilesActionPerformed
        try {
            ChoosePathFilesDialog choosePathFilesDialog = new ChoosePathFilesDialog(this, true);
            choosePathFilesDialog.setLocationRelativeTo(this);
            choosePathFilesDialog.setVisible(true);
            if (choosePathFilesDialog.isfilesSet()) {



                s.setup(choosePathFilesDialog.getArchitectureFile(), choosePathFilesDialog.getLayoutFile());
                refreshCommands();

                this.validate();
                this.pack();

                updateInstructionTableJFrame();
            };


        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to setup the simulator. \n" + ex.getMessage(), "Error", MessageType.ERROR.ordinal());
            // Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_OpenFilesActionPerformed

    private void microStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microStepActionPerformed
        try {
            s.MicroStep();
            updateExecutionLogJFrame();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Unable to perform a step. \n" + ex.getMessage(), "Error", MessageType.ERROR.ordinal());
        }
    }//GEN-LAST:event_microStepActionPerformed

    private void showInstructionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInstructionsActionPerformed
        JCheckBoxMenuItem MI = (JCheckBoxMenuItem) evt.getSource();
        showInstructionTableJFrame(MI.getState());
    }//GEN-LAST:event_showInstructionsActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        try {
            s.setup();
            refreshCommands();
            this.validate();
            //this.pack();
            executionLog.clearInstructions();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Unable to reset. \n" + ex.getMessage(), "Error", MessageType.ERROR.ordinal());
        }
    }//GEN-LAST:event_ResetActionPerformed

    private void InstructionStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstructionStepActionPerformed
        try {
            s.InstructionStep();
            updateExecutionLogJFrame();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Unable to perfom the instruction. \n" + ex.getMessage(), "Error", MessageType.ERROR.ordinal());
        }
    }//GEN-LAST:event_InstructionStepActionPerformed

    private void showExecutionLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showExecutionLogActionPerformed
        JCheckBoxMenuItem MI = (JCheckBoxMenuItem) evt.getSource();
        showExecutionLogJFrame(MI.getState());
    }//GEN-LAST:event_showExecutionLogActionPerformed

private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
    License l = new License(this, true);        // TODO add your handling code here:
    l.setLocationRelativeTo(this);
    l.setVisible(true);// TODO add your handling code here:
}//GEN-LAST:event_jMenu1MouseClicked

    private void showInstructionTableJFrame(boolean visibility) {

        if (instructionTableJframe == null) {
            instructionTableJframe = new JFrame(BuildInfo.software + " - " + "Instruction Table");
            instructionTableJframe.addWindowListener(new WindowListener() {

                public void windowOpened(WindowEvent e) {
                    // Do nothinh
                }

                public void windowClosing(WindowEvent e) {
                    showInstructions.setState(false);
                }

                public void windowClosed(WindowEvent e) {
                    // Do nothinh
                }

                public void windowIconified(WindowEvent e) {
                    // Do nothinh
                }

                public void windowDeiconified(WindowEvent e) {
                    // Do nothinh
                }

                public void windowActivated(WindowEvent e) {
                    // Do nothinh
                }

                public void windowDeactivated(WindowEvent e) {
                    // Do nothinh
                }
            });
        }



        updateInstructionTableJFrame();
        instructionTableJframe.setVisible(visibility);

        if (visibility) {
            // instructionTableJframe.setLocationRelativeTo(this);

            Point insertPoint = this.getLocation();
            insertPoint.translate(30, 30);
            instructionTableJframe.setLocation(insertPoint);

        }


    }

    private void showExecutionLogJFrame(boolean visibility) {




        updateExecutionLogJFrame();
        executionLog.setVisible(visibility);

        if (visibility) {
            // instructionTableJframe.setLocationRelativeTo(this);

            Point insertPoint = this.getLocation();
            insertPoint.translate(30, 30);
            executionLog.setLocation(insertPoint);

        }
    }

    private void updateExecutionLogJFrame() {
        if (executionLog != null) {

            executionLog.appedInstruction(s.getTimeingandControll().collectPerformedInstruction());

        }
    }

    private void updateInstructionTableJFrame() {
        if (instructionTableJframe != null) {

            instructionTableJframe.getContentPane().removeAll();
            JTable msct = new JTable(s.getTimeingandControll().generateInstuctionTable());
            instructionTableJframe.getContentPane().add(new JScrollPane(msct), BorderLayout.CENTER);
            instructionTableJframe.validate();
            instructionTableJframe.pack();
        }

    }

    /**
    
     * @param args the command line arguments
    
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JButton InstructionStep;
    private javax.swing.JMenuItem OpenFiles;
    private javax.swing.JMenuItem Reset;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton microStep;
    private javax.swing.JMenu seperatorMenu;
    private javax.swing.JCheckBoxMenuItem showExecutionLog;
    private javax.swing.JCheckBoxMenuItem showInstructions;
    private javax.swing.JCheckBoxMenuItem showLog;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    private void refreshCommands() {

        for (Component component : dynamicly_addet) {
            component.getParent().remove(component);
        }
        dynamicly_addet.clear();
        for (Entry entry : s.getCommands()) {
            final ArchitectureObjectWithBusConnection aowbc = entry.getPerformer();
            JMenu jm = new JMenu(aowbc.getName());
            final Collection<Command> commands = entry.getCommands();
            for (Command command : commands) {
                final Command c = command;

                final JMenuItem item = new JMenuItem(c.getName());
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        try {

                            c.execute(aowbc);

                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(item, "Unable to setup the simulator. \n" + ex.getMessage(), "Error", MessageType.ERROR.ordinal());
                        }
                    }
                });

                jm.add(item);
            }
            dynamicly_addet.add(jm);
            jMenuBar1.add(jm);
        }
    }

    private void initExecutionLog() {


        executionLog = new ExecutionLog(BuildInfo.software + " - " + "Instructions Performed");
        executionLog.addWindowListener(new WindowListener() {

            public void windowOpened(WindowEvent e) {
                // Do nothinh
            }

            public void windowClosing(WindowEvent e) {
                showExecutionLog.setState(false);
            }

            public void windowClosed(WindowEvent e) {
                // Do nothinh
            }

            public void windowIconified(WindowEvent e) {
                // Do nothinh
            }

            public void windowDeiconified(WindowEvent e) {
                // Do nothinh
            }

            public void windowActivated(WindowEvent e) {
                // Do nothinh
            }

            public void windowDeactivated(WindowEvent e) {
                // Do nothinh
            }
        });
        executionLog.validate();
        executionLog.pack();


    }
}
