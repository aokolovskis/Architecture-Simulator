/*
 * Copyright 2012 Aleksejs Okolovskis <oko@aloko.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package architecturesimulator.gui;

import architecturesimulator.BuildInfo;
import java.awt.TrayIcon.MessageType;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Aleksejs Okolovskis (oko@aloko.de)
 */
public class ChoosePathFilesDialog extends javax.swing.JDialog {


    private static enum Option {

        Architecture, Layout
    }
 
    private boolean filesSet = false;

    public boolean isfilesSet() {
        return filesSet;
    }

 
    
    
    
    public String getArchitectureFile() {
        return architecturetxt.getText();
    }

    public String getLayoutFile() {
        return layouttxt.getText();
    }

    /** Creates new form ChoosePathFilesDialog */
    public ChoosePathFilesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        architecturetxt.setText(System.getProperty("user.dir"));
        layouttxt.setText(System.getProperty("user.dir"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        architecturetxt = new javax.swing.JTextField();
        browseArchitecture = new javax.swing.JButton();
        layouttxt = new javax.swing.JTextField();
        browseLayout = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(BuildInfo.software + " - " + "Open files");

        jLabel1.setText("Architecture:");

        jLabel2.setText("Layout:");

        architecturetxt.setText("architecturetxt");
        architecturetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                architecturetxtActionPerformed(evt);
            }
        });

        browseArchitecture.setText("Browse");
        browseArchitecture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseArchitectureActionPerformed(evt);
            }
        });

        layouttxt.setText("layouttxt");

        browseLayout.setText("Browse");
        browseLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLayoutActionPerformed(evt);
            }
        });

        jButton3.setText("Setup");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Please, select the architecture and the corresponding layout file.");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layouttxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                            .add(architecturetxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, browseLayout, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, browseArchitecture)))
                    .add(jLabel3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(architecturetxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseArchitecture))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(layouttxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseLayout))
                .add(18, 18, 18)
                .add(jButton3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseArchitectureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseArchitectureActionPerformed
        openfile(Option.Architecture);
    }//GEN-LAST:event_browseArchitectureActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (validateFiles()) {
            this.setVisible(false);
        };        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void architecturetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_architecturetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_architecturetxtActionPerformed

    private void browseLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseLayoutActionPerformed
        openfile(Option.Layout);        // TODO add your handling code here:
    }//GEN-LAST:event_browseLayoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ChoosePathFilesDialog dialog = new ChoosePathFilesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField architecturetxt;
    private javax.swing.JButton browseArchitecture;
    private javax.swing.JButton browseLayout;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField layouttxt;
    // End of variables declaration//GEN-END:variables

    private void openfile(Option o) {
        final Option currentOption = o;

                
        final JFileChooser chooser = new JFileChooser("Select file");
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                final String name = f.getName();
                return (f.isDirectory() | name.endsWith(".architecture.xml")|name.endsWith(".layout.xml")) ;
            }

            @Override
            public String getDescription() {
               return "*.architecture.xml or *.layout.xml";
            }
        });
        final File file = new File(System.getProperty("user.dir"));

        chooser.setCurrentDirectory(file);





        chooser.addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent e) {
                if (e.getPropertyName().equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)) {
                   final File tmpfile = (File) e.getNewValue();
                   if (tmpfile== null) {return;}
                   if (tmpfile.isDirectory()) {return;}
                    if (currentOption == Option.Architecture) {                        
                        architecturetxt.setText(tmpfile.getPath());        
                    } else if (currentOption == Option.Layout) {                        
                        layouttxt.setText(tmpfile.getPath());
                    }
                }
            }
        });




        chooser.setVisible(true);
        final int result = chooser.showOpenDialog(null);



        chooser.setVisible(false);


    }

    private boolean validateFiles() {
        File ArchitectureFile = new File(architecturetxt.getText());
        File LayoutFile = new File(layouttxt.getText());
        
        filesSet= true;
        
        if (ArchitectureFile == null || LayoutFile == null || LayoutFile.isDirectory() ||  ArchitectureFile.isDirectory() || !LayoutFile.canRead() ||  !ArchitectureFile.canRead()  ) {
            JOptionPane.showMessageDialog(this, "Choose an architecure and layout file.", "Error", MessageType.ERROR.ordinal());
            filesSet = false;
        }

        
        return filesSet;
    }
    
    
}
